Instructions:

1 startapp
    settigs,models,admin,views, urls

2 serializers
    config:
        url, settings
    app:
        models, admin, 
        serializer (+ detailSerializer), views 
        serializer API's - 
        ListAPIView, CreateAPIView, CinemaFilter(django_filters.FilterSet), RetrieveAPIView, DestroyAPIView
        views -> serializer -> urls

3 Authentications 
    settings:
            REST_FRAMEWORK = {
        'DEFAULT_AUTHENTICATION_CLASSES': [
            'rest_framework.authentication.TokenAuthentication',
            ],
        }
    -> views.   (from rest_framework.authentication import SessionAuthentication, BasicAuthentication
                from rest_framework.permissions import IsAuthenticated)
    token ->    settings (installed apps;     'rest_framework.authtoken',)
    -> signals. ()
    -> urls     (from rest_framework.authtoken import views 
                path('api-token-auth/', views.obtain_auth_token -> [signals.py], name='api_token_auth'))
    -> views    (from rest_framework.authtoken.views import ObtainAuthToken
                from rest_framework.authtoken.models import Token
                from rest_framework.response import Response 
                )
                #auth
                from rest_framework.authentication import SessionAuthentication, BasicAuthentication
                from rest_framework.permissions import IsAuthenticated, IsAuthenticatedOrReadOnly

                # auth
                from rest_framework.authtoken.views import ObtainAuthToken
                from rest_framework.authtoken.models import Token
                from rest_framework.response import Response 

                #user
                from django.contrib.auth.models import User
                -> serialier - # Users $ Auth 
    -> permission.py -> 
    -> settings.py REST_FRAMEWORK = {
                    'DEFAULT_AUTHENTICATION_CLASSES': [
                        'rest_framework.authentication.TokenAuthentication',
                    ],
                    'DEFAULT_PERMISSION_CLASSES': [
                        'rest_framework.permissions.DjangoModelPermissionsOrAnonReadOnly'
                    ],
                    }
                    -> new views for MovingTicket  -> [DjangoModelPermissionsOrAnonReadOnly] - будут иметь доступ
    -> views [GET- POST] 
            import APIVIE, response
            -> job_list -> jobserializer -> urls -> views - viewsset (class RoomViewSet) - url (include, router)
            -> from rest-frame.viewset impor t Modelviewset

            google authoritation -> https://console.cloud.google.com/apis/credentials - social_network 
            https://www.youtube.com/watch?v=XEHzrXlQAY8&list=PLF-NY6ldwAWosy6hAyKMwZozmEyq1J2fg&index=4

    -> templates - open directory templates -> settings ['tempalates'] - (settings)STATIC_ROOT = 'static/'
            view - TemplateView - urls - settings STATIC_URL = 'static/'
                                                    STATICFILES_DIRS = [
                                                        BASE_DIR / 'static',
                                                    ]
            -> forms.py (cinema) ->


4 -> Celery!  - Подтверждение Gmail
-> Imap google settings -> On your computer, open Gmail. -> google accout -> settings - >
 -> Пересылка и POP/IMAP -> 	Включить IMAP (в день можем только отправлять по 99 сообщении) 
  -> send_mail.py -> env (login, password) -> settings (GMAIL_USER, GMAIL_PASSWORD) ->
   -> https://console.cloud.google.com/iam-admin/serviceaccounts/details/103083773923208257266;edit=true?project=winter-footing-368514
    (даем доступ почте и создаем сервисную почту) 

            flow = InstalledAppFlow.from_client_secrets_file(
            '../googlemail.json', SCOPES) # тут обязательно ../google и тд
    
    pip install --upgrade google-api-python-client google-auth-httplib2 google-auth-oauthlib
    https://console.cloud.google.com/ 
            1. Создаем АПИ 'new project', даем имена доступ почту, после OAuth client id - даем доступ Тест юзер
            2. Даем доступ 

    Celery - pip install celery
    https://www.rabbitmq.com/install-debian.html - install all code's - если установлено раннее, то не нужно все устанавливать
    https://simpleisbetterthancomplex.com/tutorial/2017/08/20/how-to-use-celery-with-django.html#installing-rabbitmq-on-ubuntu-1604
    
    in settings - celery.py - код внутри прописываем и название проекта -
    blog - tasks.py - forms - html - views - url - 
     -> в сеттингах нужно будет убрать 
        # GMAIL_USER = env('LOGIN GMAIL')
        # GMAIL_PASSWORD = env('PASSWORD GMAIL') 
    -> дальше прописываешь во втором терминале, включив вирт.окруж celery -A mysite worker -l info 
    пишешь 

    Отправка Google сообщении через Селери - settings.   GOOGLE_KEY = BASE_DIR / 'blog/googlemail.json'
                                                        GOOGLE_TOKEN = BASE_DIR / 'blog/token.json'
            потом в from django.conf import settings - и вставляет где token - settings.GOOGLE_TOKEN
                                                                google key - settings.GOOGLE_KEY
    + Crontab - package from Celery in celery.py also +
    pip install python-crontab

    Проверка перед запуском - Rabbitmq статуса - sudo systemctl status rabbitmq-server
                     celery - A mysite worker -l info 
    через питон шел, запускаем код отдельно селери -
                            - from blog.create_random_user_accounts import create_random_user_accounts
                              create_random_user_accounts.apply_async((20, )) - создали юзеров,
                                                                                через шел отдельно функцию
        
        -> celery (celery beat) -> celery.py: celery -A sinema worker -l info
                                    (и запускаете в отдельном терминале селери) ->
                                        next -> celery -A  sinema(your project)  beat (в другом терминале)
        

5. flake8   - чтобы видеть ошибки
    на уровне manage.py - создаем flake8 - запуск в старапп 'flake8 movie/views.py'
    pip install flake8

            - Чтобы убрать ошибки
    black - touch .black  - прописываем -   [tool.black]
                                                    line-length = 80
    потом прописываем 

6.  Проверка rabbitmq - sudo systemctl status rabbitmq-server
    pip установить django-celery-beat
    instaled apps -     'django_celery_beat',
        в первом терминале запускаем селери - celery - A sinema worker -l info 
        во втором терминале, запускаем - celery -A sinema beat -l info --scheduler django_celery_beat.schedulers:DatabaseScheduler
    потом можем отправлять задачи через админ панель - sending tasks from admin panel with celery bead 
    
    flower
    Проверка rabbitmq - sudo systemctl status rabbitmq-server
    pip install flower
    1) пишем в первом терминале - celery -A sinema worker -l info 
    2) во втором - celery -A sinema beat -l info --scheduler django_celery_beat.schedulers:DatabaseScheduler
    3) в третьем запуск - celery flower --port=5566 и переход будет так - http://localhost:5566/


7. Docker - info - whttps://www.digitalocean.com/community/tutorials/how-to-install-and-use-docker-on-ubuntu-20-04-ru
        7.1  sudo apt update
        7.2  sudo apt install apt-transport-https ca-certificates curl software-properties-common
        7.3  curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
        7.4  sudo add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu focal stable"
        7.5  sudo apt update
        7.6  apt-cache policy docker-ce
        7.7  sudo apt install docker-ce
        7.8  sudo systemctl status docker
                Всегда использовать "Sudo"!!!
        7.9  sudo docker run hello-world
        7.11 sudo docker ps
        7.12 sudo docker ps -a   (все проекты)
                Дополнительные коды
                sudo docker stop {key} /  sudo docker restart {key}
                sudo docker start {key} - проверка - sudo docker ps (если ничего нет, не запустился)
                sudo docker rm {key}
        7.13 Dockerfile - на уровне manage.py 
        7.14 requirements.txt - update - pip freeze and delete backports.zoneinfo==0.2.1
        7.15 settings.py - изменяем - 
         DATABASES = {
                'default': {
                    'ENGINE': 'django.db.backends.sqlite3',
                    'NAME': BASE_DIR / 'db.sqlite3',
                }
                # 'default': {
                #     'ENGINE': 'django.db.backends.postgresql_psycopg2',
                #     'NAME': env('DB'),
                #     'USER': env('DB_USER'),
                #     'PASSWORD': env('DB_PASSWORD'),
                #     'HOST': env('DB_HOST'),
                #     'PORT': env('DB_PORT')
                # }
            }
        7.16  python3 manage.py migrate 
        7.17  python3 manage.py createsuperuser
        7.17  sudo docker build -t getting-started .
        7.17  sudo docker run -dp 8000:8000 getting-started
        7.17  sudo docker ps (проверка и проходим дальше на сайт http://127.0.0.1:8000)
        7.18  добавляем в докерфайл селери запуски 
                    sudo docker run -dp (пишем хост например 8001:8001) getting-started - для фловер
                    sudo docker ps - проверяем работает ли
                    и переходим по хосту 8001
                    другие тоже самое
        7.20  Или же все CMD - прописываем одним махом после 
        7.21  sudo docker run -dp 8001:8000 getting-started - даем новый порт 8001 и ждем. 
                                                        если сайт не отображает, пишем: 
                                                                        это айди ниже
                                                        sudo docker logs (айди контейнера) -f
        7.22  Проверка активности докера - sudo systemctl status docker
                                            
                                    
