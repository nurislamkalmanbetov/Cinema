1 startapp
    settigs,models,admin,views, urls
2 serializers
    config:
        url, settings
    app:
        models, admin, 
        serializer (+ detailSerializer), views 
        serializer API's - 
        ListAPIView, CreateAPIView, CinemaFilter(django_filters.FilterSet), RetrieveAPIView, DestroyAPIView
        views -> serializer -> urls
3 Authentications 
    settings:
            REST_FRAMEWORK = {
        'DEFAULT_AUTHENTICATION_CLASSES': [
            'rest_framework.authentication.TokenAuthentication',
            ],
        }
    -> views.   (from rest_framework.authentication import SessionAuthentication, BasicAuthentication
                from rest_framework.permissions import IsAuthenticated)
    token ->    settings (installed apps;     'rest_framework.authtoken',)
    -> signals. ()
    -> urls     (from rest_framework.authtoken import views 
                path('api-token-auth/', views.obtain_auth_token -> [signals.py], name='api_token_auth'))
    -> views    (from rest_framework.authtoken.views import ObtainAuthToken
                from rest_framework.authtoken.models import Token
                from rest_framework.response import Response 
                )
                #auth
                from rest_framework.authentication import SessionAuthentication, BasicAuthentication
                from rest_framework.permissions import IsAuthenticated, IsAuthenticatedOrReadOnly

                # auth
                from rest_framework.authtoken.views import ObtainAuthToken
                from rest_framework.authtoken.models import Token
                from rest_framework.response import Response 

                #user
                from django.contrib.auth.models import User
                -> serialier - # Users $ Auth 
    -> permission.py -> 
    -> settings.py REST_FRAMEWORK = {
                    'DEFAULT_AUTHENTICATION_CLASSES': [
                        'rest_framework.authentication.TokenAuthentication',
                    ],
                    'DEFAULT_PERMISSION_CLASSES': [
                        'rest_framework.permissions.DjangoModelPermissionsOrAnonReadOnly'
                    ],
                    }
                    -> new views for MovingTicket  -> [DjangoModelPermissionsOrAnonReadOnly] - будут иметь доступ
    -> views [GET- POST] 
            import APIVIE, response
            -> job_list -> jobserializer -> urls -> views - viewsset (class RoomViewSet) - url (include, router)
            -> from rest-frame.viewset impor t Modelviewset

            google authoritation -> https://console.cloud.google.com/apis/credentials - social_network 
            https://www.youtube.com/watch?v=XEHzrXlQAY8&list=PLF-NY6ldwAWosy6hAyKMwZozmEyq1J2fg&index=4

    -> templates - open directory templates -> settings ['tempalates'] - (settings)STATIC_ROOT = 'static/'
            view - TemplateView - urls - settings STATIC_URL = 'static/'
                                                    STATICFILES_DIRS = [
                                                        BASE_DIR / 'static',
                                                    ]
            -> forms.py (cinema) ->
4 -> Celery!  - Подтверждение Gmail
-> Imap google settings -> On your computer, open Gmail. -> google accout -> settings - >
 -> Пересылка и POP/IMAP -> 	Включить IMAP (в день можем только отправлять по 99 сообщении) 
  -> send_mail.py -> env (login, password) -> settings (GMAIL_USER, GMAIL_PASSWORD) ->
   -> https://console.cloud.google.com/iam-admin/serviceaccounts/details/103083773923208257266;edit=true?project=winter-footing-368514
    (даем доступ почте и создаем сервисную почту) 

            flow = InstalledAppFlow.from_client_secrets_file(
            '../googlemail.json', SCOPES) # тут обязательно ../google и тд
    
    pip install --upgrade google-api-python-client google-auth-httplib2 google-auth-oauthlib
    https://console.cloud.google.com/ 
            1. Создаем АПИ 'new project', даем имена доступ почту, после OAuth client id - даем доступ Тест юзер
            2. Даем доступ 

    Celery - pip install celery
    https://www.rabbitmq.com/install-debian.html - install all code's - если установлено раннее, то не нужно все устанавливать
    https://simpleisbetterthancomplex.com/tutorial/2017/08/20/how-to-use-celery-with-django.html#installing-rabbitmq-on-ubuntu-1604
    in settings - celery.py - код внутри прописываем и название проекта -
    blog - tasks.py - forms - html - views - url - 
     -> в сеттингах нужно будет убрать 
        # GMAIL_USER = env('LOGIN GMAIL')
        # GMAIL_PASSWORD = env('PASSWORD GMAIL') 
    -> дальше прописываешь во втором терминале, включив вирт.окруж celery -A mysite worker -l info 
    пишешь 

    Отправка Google сообщении через Селери - settings.   GOOGLE_KEY = BASE_DIR / 'blog/googlemail.json'
                                                        GOOGLE_TOKEN = BASE_DIR / 'blog/token.json'
            потом в from django.conf import settings - и вставляет где token - settings.GOOGLE_TOKEN
                                                                google key - settings.GOOGLE_KEY 




















